#!/bin/sh
#
# moloch-es     Elasticsearch backend for moloch capture/viewer
#
# chkconfig:    345 60 70
# description:    Elasticsearch backend for moloch capture/viewer

# Source function library.
. /etc/rc.d/init.d/functions

RETVAL=0
prog="moloch-es"

TDIR=/data/moloch
exec="bin/elasticsearch -Des.config=${TDIR}/etc/elasticsearch.yml -d"



cd ${TDIR}/elasticsearch-1.5.2
ulimit -a
# Uncomment if using Sun Java for better memory utilization
# export JAVA_OPTS="-XX:+UseCompressedOops"
export ES_HOSTNAME=`hostname -s`a

# Increase memory
ES_HEAP_SIZE=2048

LOCKFILE="/var/lock/subsys/${prog}"
PIDFILE="/var/run/${prog}.pid"

start() {
    echo -n "Starting ${prog} : "
     if [ -s ${PIDFILE} ]; then
       RETVAL=1
       echo -n "Already running !" && warning
       echo
    else
       nohup $exec >/dev/null 2>&1 &
       echo "Waiting for Elasticsearch cluster to spin up..."
       #Now we need to loop while checking to see if the cluster comes up.

       i=1
       sp="/-\|"
       echo -n ' '

       #Let's give it 60sec
       for x in {1..60}
         do
             if [[ -n $(curl --fail --silent 'http://localhost:9200/_cluster/health' | grep "green") ]]; then
               #We have liftoff!!

         initctl emit moloch-es-started --no-wait

           RETVAL=$?
               PID=$(ps -ef | grep "elasticsearch" | grep "java" | awk -F" " '{print $2}')
           [ $RETVAL -eq 0 ] && touch ${LOCKFILE} && success || failure
           echo
           echo $PID > ${PIDFILE}
           return $RETVAL
             else
               sleep 1
               printf "\b${sp:i++%${#sp}:1}"
             fi
       done

    #Uh oh. We didn't start in time, or we started in a bad state.
    echo -n "There was a problem starting Elasticsearch. && warning"
    echo $(tail -n 25 /data/moloch/logs/Moloch.log)

    fi
}

stop() {
    echo -n $"Stopping $prog"
    killproc java -TERM
    RETVAL=$?
    echo
    [ $RETVAL -eq 0 ] && rm -f $LOCKFILE %% rm -f $PIDFILE
    return $RETVAL
}



restart() {
    stop
    start
}

reload() {
    restart
}

force_reload() {
    restart
}

rh_status() {
    status $prog
}

rh_status_q() {
    rh_status >/dev/null 2>&1
}


case "$1" in
    start)
        start
        ;;
    stop)
        stop
        ;;
    restart)
        stop
    start
        ;;
    status)
        rh_status
        ;;
    *)
    echo "Usage: $prog {start|stop|status|restart}"
    exit 1
    ;;
esac
exit $RETVAL

